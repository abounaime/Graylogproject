{"version":3,"sources":["webpack:///41.f4e666cd5ae6a3e3cac4.js","webpack:///./src/pages/ShowDashboardPage.jsx","webpack:///./src/pages/ShowDashboardPage.css","webpack:///./src/pages/ShowDashboardPage.css?0402"],"names":["webpackJsonp","1370","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_react","_react2","_reflux","_reflux2","_reactBootstrap","_plugin","_deepEqual","_deepEqual2","_StoreProvider","_StoreProvider2","_DocsHelper","_DocsHelper2","_UserNotification","_UserNotification2","_Routes","_Routes2","_common","_PermissionsMixin","_PermissionsMixin2","_DocumentationLink","_DocumentationLink2","_EditDashboardModalTrigger","_EditDashboardModalTrigger2","_Widget","_Widget2","_ShowDashboardPage","_ShowDashboardPage2","StreamsStore","getStore","CurrentUserStore","DashboardsStore","FocusStore","WidgetsStore","ShowDashboardPage","createClass","displayName","propTypes","history","PropTypes","object","isRequired","params","mixins","connect","getInitialState","locked","forceUpdateInBackground","streamIds","componentDidMount","_this","this","loadData","listenTo","removeWidget","load","streams","streamIds2","reduce","stream","id","setState","loadInterval","setInterval","state","currentUser","preferences","updateUnfocussed","componentWillUnmount","clearInterval","DASHBOARDS_EDIT","DEFAULT_HEIGHT","DEFAULT_WIDTH","_this2","dashboardId","props","get","then","dashboard","isMounted","widgets","sort","w1","w2","localeCompare","response","additional","status","error","pushState","DASHBOARDS","shouldUpdate","Boolean","focus","delete","emptyDashboard","createElement","Row","className","Col","md","Alert","page","PAGES","text","_defaultWidgetDimensions","widget","dimensions","col","row","widgetPlugin","PluginStore","filter","plugin","type","toUpperCase","height","defaultHeight","width","defaultWidth","_dashboardIsEmpty","length","formatDashboard","_this3","positions","forEach","persistedDimensions","defaultDimensions","undefined","widget1","widget2","position1","position2","map","key","widgetContainer","ReactGridContainer","onPositionsChange","_onPositionsChange","_unlockDashboard","event","preventDefault","_toggleUnlock","newPositions","updatePositions","_toggleFullscreen","element","document","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","_toggleUpdateInBackground","forceUpdate","success","render","Spinner","actions","Button","bsStyle","onClick","IfPermitted","permissions","supportText","href","role","editDashboardTrigger","action","title","description","buttonClass","dashboardTitle","data-dashboard-id","DocumentTitle","PageHeader","1400","push","i","locals","1466","content"],"mappings":"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","file":"41.f4e666cd5ae6a3e3cac4.js","sourcesContent":["webpackJsonp([41],{\n\n/***/ 1370:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = __webpack_require__(2);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reflux = __webpack_require__(1);\n\nvar _reflux2 = _interopRequireDefault(_reflux);\n\nvar _reactBootstrap = __webpack_require__(15);\n\nvar _plugin = __webpack_require__(262);\n\nvar _deepEqual = __webpack_require__(272);\n\nvar _deepEqual2 = _interopRequireDefault(_deepEqual);\n\nvar _StoreProvider = __webpack_require__(18);\n\nvar _StoreProvider2 = _interopRequireDefault(_StoreProvider);\n\nvar _DocsHelper = __webpack_require__(959);\n\nvar _DocsHelper2 = _interopRequireDefault(_DocsHelper);\n\nvar _UserNotification = __webpack_require__(5);\n\nvar _UserNotification2 = _interopRequireDefault(_UserNotification);\n\nvar _Routes = __webpack_require__(75);\n\nvar _Routes2 = _interopRequireDefault(_Routes);\n\nvar _common = __webpack_require__(48);\n\nvar _PermissionsMixin = __webpack_require__(168);\n\nvar _PermissionsMixin2 = _interopRequireDefault(_PermissionsMixin);\n\nvar _DocumentationLink = __webpack_require__(965);\n\nvar _DocumentationLink2 = _interopRequireDefault(_DocumentationLink);\n\nvar _EditDashboardModalTrigger = __webpack_require__(1041);\n\nvar _EditDashboardModalTrigger2 = _interopRequireDefault(_EditDashboardModalTrigger);\n\nvar _Widget = __webpack_require__(1163);\n\nvar _Widget2 = _interopRequireDefault(_Widget);\n\nvar _ShowDashboardPage = __webpack_require__(1466);\n\nvar _ShowDashboardPage2 = _interopRequireDefault(_ShowDashboardPage);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar StreamsStore = _StoreProvider2.default.getStore('Streams');\nvar CurrentUserStore = _StoreProvider2.default.getStore('CurrentUser');\nvar DashboardsStore = _StoreProvider2.default.getStore('Dashboards');\nvar FocusStore = _StoreProvider2.default.getStore('Focus');\nvar WidgetsStore = _StoreProvider2.default.getStore('Widgets');\n\nvar ShowDashboardPage = _react2.default.createClass({\n  displayName: 'ShowDashboardPage',\n\n  propTypes: {\n    history: _react2.default.PropTypes.object.isRequired,\n    params: _react2.default.PropTypes.object.isRequired\n  },\n  mixins: [_reflux2.default.connect(CurrentUserStore), _reflux2.default.connect(FocusStore), _PermissionsMixin2.default],\n\n  getInitialState: function getInitialState() {\n    return {\n      locked: true,\n      forceUpdateInBackground: false,\n      streamIds: null\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    this.loadData();\n    this.listenTo(WidgetsStore, this.removeWidget);\n    // we use the stream ids to potentially disable search replay buttons for deleted streams\n    StreamsStore.load(function (streams) {\n      var streamIds2 = streams.reduce(function (streamIds, stream) {\n        // eslint-disable-next-line no-param-reassign\n        streamIds[stream.id] = stream.id;\n        return streamIds;\n      }, {});\n      _this.setState({ streamIds: streamIds2 });\n    });\n    this.loadInterval = setInterval(this.loadData, 2000);\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({ forceUpdateInBackground: this.state.currentUser.preferences.updateUnfocussed });\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this.loadInterval) {\n      clearInterval(this.loadInterval);\n    }\n  },\n\n  DASHBOARDS_EDIT: 'dashboards:edit',\n  DEFAULT_HEIGHT: 1,\n  DEFAULT_WIDTH: 2,\n  loadData: function loadData() {\n    var _this2 = this;\n\n    var dashboardId = this.props.params.dashboardId;\n    DashboardsStore.get(dashboardId).then(function (dashboard) {\n      if (!_this2.isMounted()) {\n        return;\n      }\n\n      // Compare dashboard in state with the one received, need to sort widgets to avoid that they come in\n      // a different order, affecting the comparison.\n      dashboard.widgets.sort(function (w1, w2) {\n        return w1.id.localeCompare(w2.id);\n      });\n      if (!_this2.state.dashboard || !(0, _deepEqual2.default)(_this2.state.dashboard, dashboard)) {\n        _this2.setState({ dashboard: dashboard });\n      }\n    }, function (response) {\n      if (response.additional && response.additional.status === 404) {\n        _UserNotification2.default.error('Unable to find a dashboard with the id <' + dashboardId + '>. Maybe it was deleted in the meantime.');\n        _this2.props.history.pushState(null, _Routes2.default.DASHBOARDS);\n      }\n    });\n  },\n  shouldUpdate: function shouldUpdate() {\n    return Boolean(this.state.forceUpdateInBackground || this.state.focus);\n  },\n  removeWidget: function removeWidget(props) {\n    if (props.delete) {\n      this.loadData();\n    }\n  },\n  emptyDashboard: function emptyDashboard() {\n    return _react2.default.createElement(\n      _reactBootstrap.Row,\n      { className: 'content' },\n      _react2.default.createElement(\n        _reactBootstrap.Col,\n        { md: 12 },\n        _react2.default.createElement(\n          _reactBootstrap.Alert,\n          { className: 'no-widgets' },\n          'This dashboard has no widgets yet. Learn how to add widgets in the ',\n          _react2.default.createElement(_DocumentationLink2.default, {\n            page: _DocsHelper2.default.PAGES.DASHBOARDS, text: 'documentation' }),\n          '.'\n        )\n      )\n    );\n  },\n  _defaultWidgetDimensions: function _defaultWidgetDimensions(widget) {\n    var dimensions = { col: 0, row: 0 };\n\n    var widgetPlugin = _plugin.PluginStore.exports('widgets').filter(function (plugin) {\n      return plugin.type.toUpperCase() === widget.type.toUpperCase();\n    })[0];\n    if (widgetPlugin) {\n      dimensions.height = widgetPlugin.defaultHeight;\n      dimensions.width = widgetPlugin.defaultWidth;\n    } else {\n      dimensions.height = this.DEFAULT_HEIGHT;\n      dimensions.width = this.DEFAULT_WIDTH;\n    }\n\n    return dimensions;\n  },\n  _dashboardIsEmpty: function _dashboardIsEmpty(dashboard) {\n    return dashboard.widgets.length === 0;\n  },\n  formatDashboard: function formatDashboard(dashboard) {\n    var _this3 = this;\n\n    if (this._dashboardIsEmpty(dashboard)) {\n      return this.emptyDashboard();\n    }\n\n    var positions = {};\n    dashboard.widgets.forEach(function (widget) {\n      var persistedDimensions = dashboard.positions[widget.id] || {};\n      var defaultDimensions = _this3._defaultWidgetDimensions(widget);\n      positions[widget.id] = {\n        col: persistedDimensions.col === undefined ? defaultDimensions.col : persistedDimensions.col,\n        row: persistedDimensions.row === undefined ? defaultDimensions.row : persistedDimensions.row,\n        height: persistedDimensions.height === undefined ? defaultDimensions.height : persistedDimensions.height,\n        width: persistedDimensions.width === undefined ? defaultDimensions.width : persistedDimensions.width\n      };\n    });\n\n    var widgets = dashboard.widgets.sort(function (widget1, widget2) {\n      var position1 = positions[widget1.id];\n      var position2 = positions[widget2.id];\n      if (position1.col === position2.col) {\n        return position1.row - position2.row;\n      }\n\n      return position1.col - position2.col;\n    }).map(function (widget) {\n      return _react2.default.createElement(\n        'div',\n        { key: widget.id, className: _ShowDashboardPage2.default.widgetContainer },\n        _react2.default.createElement(_Widget2.default, { id: widget.id, key: 'widget-' + widget.id, widget: widget, dashboardId: dashboard.id,\n          locked: _this3.state.locked, shouldUpdate: _this3.shouldUpdate(), streamIds: _this3.state.streamIds })\n      );\n    });\n\n    return _react2.default.createElement(\n      _reactBootstrap.Row,\n      null,\n      _react2.default.createElement(\n        'div',\n        { className: 'dashboard' },\n        _react2.default.createElement(\n          _common.ReactGridContainer,\n          { positions: positions, onPositionsChange: this._onPositionsChange, locked: this.state.locked },\n          widgets\n        )\n      )\n    );\n  },\n  _unlockDashboard: function _unlockDashboard(event) {\n    event.preventDefault();\n    if (this.state.locked) {\n      this._toggleUnlock();\n    }\n  },\n  _toggleUnlock: function _toggleUnlock() {\n    this.setState({ locked: !this.state.locked });\n  },\n  _onPositionsChange: function _onPositionsChange(newPositions) {\n    DashboardsStore.updatePositions(this.state.dashboard, newPositions);\n  },\n  _toggleFullscreen: function _toggleFullscreen() {\n    var element = document.documentElement;\n    if (element.requestFullscreen) {\n      element.requestFullscreen();\n    } else if (element.mozRequestFullScreen) {\n      element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullscreen) {\n      element.webkitRequestFullscreen();\n    } else if (element.msRequestFullscreen) {\n      element.msRequestFullscreen();\n    }\n  },\n  _toggleUpdateInBackground: function _toggleUpdateInBackground() {\n    var forceUpdate = !this.state.forceUpdateInBackground;\n    this.setState({ forceUpdateInBackground: forceUpdate });\n    _UserNotification2.default.success('Graphs will be updated ' + (forceUpdate ? 'even' : 'only') + ' when the browser is in the ' + (forceUpdate ? 'background' : 'foreground'), '');\n  },\n  render: function render() {\n    if (!this.state.dashboard) {\n      return _react2.default.createElement(_common.Spinner, null);\n    }\n\n    var dashboard = this.state.dashboard;\n\n    var actions = void 0;\n    if (!this._dashboardIsEmpty(dashboard)) {\n      actions = _react2.default.createElement(\n        'div',\n        null,\n        _react2.default.createElement(\n          _reactBootstrap.Button,\n          { id: 'update-unfocussed', bsStyle: 'info', onClick: this._toggleUpdateInBackground },\n          'Update in ',\n          this.state.forceUpdateInBackground ? 'foreground' : 'background'\n        ),\n        ' ',\n        _react2.default.createElement(\n          _reactBootstrap.Button,\n          { className: 'toggle-fullscreen', bsStyle: 'info', onClick: this._toggleFullscreen },\n          'Fullscreen'\n        ),\n        _react2.default.createElement(\n          _common.IfPermitted,\n          { permissions: this.DASHBOARDS_EDIT + ':' + dashboard.id },\n          ' ',\n          _react2.default.createElement(\n            _reactBootstrap.Button,\n            { bsStyle: 'success', onClick: this._toggleUnlock },\n            this.state.locked ? 'Unlock / Edit' : 'Lock'\n          )\n        )\n      );\n    }\n\n    var supportText = void 0;\n    if (!this._dashboardIsEmpty(dashboard)) {\n      supportText = _react2.default.createElement(\n        _common.IfPermitted,\n        { permissions: this.DASHBOARDS_EDIT + ':' + dashboard.id },\n        _react2.default.createElement(\n          'div',\n          { id: 'drag-widgets-description' },\n          'Drag widgets to any position you like in ',\n          _react2.default.createElement(\n            'a',\n            { href: '#', role: 'button', onClick: this._unlockDashboard },\n            'unlock / edit'\n          ),\n          ' mode.'\n        )\n      );\n    }\n\n    var editDashboardTrigger = !this.state.locked && !this._dashboardIsEmpty(dashboard) ? _react2.default.createElement(\n      _EditDashboardModalTrigger2.default,\n      { id: dashboard.id, action: 'edit', title: dashboard.title,\n        description: dashboard.description, buttonClass: 'btn-info btn-xs' },\n      _react2.default.createElement('i', { className: 'fa fa-pencil' })\n    ) : null;\n    var dashboardTitle = _react2.default.createElement(\n      'span',\n      null,\n      _react2.default.createElement(\n        'span',\n        { 'data-dashboard-id': dashboard.id, className: 'dashboard-title' },\n        dashboard.title\n      ),\n      '\\xA0',\n      editDashboardTrigger\n    );\n    return _react2.default.createElement(\n      _common.DocumentTitle,\n      { title: 'Dashboard ' + dashboard.title },\n      _react2.default.createElement(\n        'span',\n        null,\n        _react2.default.createElement(\n          _common.PageHeader,\n          { title: dashboardTitle },\n          _react2.default.createElement(\n            'span',\n            { 'data-dashboard-id': dashboard.id, className: 'dashboard-description' },\n            dashboard.description\n          ),\n          supportText,\n          actions\n        ),\n        this.formatDashboard(dashboard),\n        _react2.default.createElement('div', { className: 'clearfix' })\n      )\n    );\n  }\n});\n\nexports.default = ShowDashboardPage;\nmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 1400:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(19)();\n// imports\n\n\n// module\nexports.push([module.i, \"._3HrW10n1kzGWl5PDY4B2uD{background-color:#fff;border:1px solid #d1d1d1;z-index:auto}\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"widgetContainer\": \"_3HrW10n1kzGWl5PDY4B2uD\"\n};\n\n/***/ }),\n\n/***/ 1466:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(1400);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(20)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js!./ShowDashboardPage.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js!./ShowDashboardPage.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 41.f4e666cd5ae6a3e3cac4.js","import React from 'react';\nimport Reflux from 'reflux';\nimport { Row, Col, Button, Alert } from 'react-bootstrap';\nimport { PluginStore } from 'graylog-web-plugin/plugin';\nimport deepEqual from 'deep-equal';\n\nimport StoreProvider from 'injection/StoreProvider';\nconst StreamsStore = StoreProvider.getStore('Streams');\nconst CurrentUserStore = StoreProvider.getStore('CurrentUser');\nconst DashboardsStore = StoreProvider.getStore('Dashboards');\nconst FocusStore = StoreProvider.getStore('Focus');\nconst WidgetsStore = StoreProvider.getStore('Widgets');\n\nimport DocsHelper from 'util/DocsHelper';\nimport UserNotification from 'util/UserNotification';\nimport Routes from 'routing/Routes';\n\nimport { DocumentTitle, ReactGridContainer, PageHeader, Spinner, IfPermitted } from 'components/common';\nimport PermissionsMixin from 'util/PermissionsMixin';\nimport DocumentationLink from 'components/support/DocumentationLink';\nimport EditDashboardModalTrigger from 'components/dashboard/EditDashboardModalTrigger';\nimport Widget from 'components/widgets/Widget';\n\nimport style from './ShowDashboardPage.css';\n\nconst ShowDashboardPage = React.createClass({\n  propTypes: {\n    history: React.PropTypes.object.isRequired,\n    params: React.PropTypes.object.isRequired,\n  },\n  mixins: [Reflux.connect(CurrentUserStore), Reflux.connect(FocusStore), PermissionsMixin],\n\n  getInitialState() {\n    return {\n      locked: true,\n      forceUpdateInBackground: false,\n      streamIds: null,\n    };\n  },\n  componentDidMount() {\n    this.loadData();\n    this.listenTo(WidgetsStore, this.removeWidget);\n    // we use the stream ids to potentially disable search replay buttons for deleted streams\n    StreamsStore.load((streams) => {\n      const streamIds2 = streams.reduce((streamIds, stream) => {\n        // eslint-disable-next-line no-param-reassign\n        streamIds[stream.id] = stream.id;\n        return streamIds;\n      }, {});\n      this.setState({ streamIds: streamIds2 });\n    });\n    this.loadInterval = setInterval(this.loadData, 2000);\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({ forceUpdateInBackground: this.state.currentUser.preferences.updateUnfocussed });\n  },\n  componentWillUnmount() {\n    if (this.loadInterval) {\n      clearInterval(this.loadInterval);\n    }\n  },\n  DASHBOARDS_EDIT: 'dashboards:edit',\n  DEFAULT_HEIGHT: 1,\n  DEFAULT_WIDTH: 2,\n  loadData() {\n    const dashboardId = this.props.params.dashboardId;\n    DashboardsStore.get(dashboardId)\n      .then((dashboard) => {\n        if (!this.isMounted()) {\n          return;\n        }\n\n        // Compare dashboard in state with the one received, need to sort widgets to avoid that they come in\n        // a different order, affecting the comparison.\n        dashboard.widgets.sort((w1, w2) => w1.id.localeCompare(w2.id));\n        if (!this.state.dashboard || !deepEqual(this.state.dashboard, dashboard)) {\n          this.setState({ dashboard: dashboard });\n        }\n      }, (response) => {\n        if (response.additional && response.additional.status === 404) {\n          UserNotification.error(`Unable to find a dashboard with the id <${dashboardId}>. Maybe it was deleted in the meantime.`);\n          this.props.history.pushState(null, Routes.DASHBOARDS);\n        }\n      });\n  },\n  shouldUpdate() {\n    return Boolean(this.state.forceUpdateInBackground || this.state.focus);\n  },\n  removeWidget(props) {\n    if (props.delete) {\n      this.loadData();\n    }\n  },\n  emptyDashboard() {\n    return (\n      <Row className=\"content\">\n        <Col md={12}>\n          <Alert className=\"no-widgets\">\n            This dashboard has no widgets yet. Learn how to add widgets in the <DocumentationLink\n            page={DocsHelper.PAGES.DASHBOARDS} text=\"documentation\" />.\n          </Alert>\n        </Col>\n      </Row>\n    );\n  },\n  _defaultWidgetDimensions(widget) {\n    const dimensions = { col: 0, row: 0 };\n\n    const widgetPlugin = PluginStore.exports('widgets').filter(plugin => plugin.type.toUpperCase() === widget.type.toUpperCase())[0];\n    if (widgetPlugin) {\n      dimensions.height = widgetPlugin.defaultHeight;\n      dimensions.width = widgetPlugin.defaultWidth;\n    } else {\n      dimensions.height = this.DEFAULT_HEIGHT;\n      dimensions.width = this.DEFAULT_WIDTH;\n    }\n\n    return dimensions;\n  },\n  _dashboardIsEmpty(dashboard) {\n    return dashboard.widgets.length === 0;\n  },\n  formatDashboard(dashboard) {\n    if (this._dashboardIsEmpty(dashboard)) {\n      return this.emptyDashboard();\n    }\n\n    const positions = {};\n    dashboard.widgets.forEach((widget) => {\n      const persistedDimensions = dashboard.positions[widget.id] || {};\n      const defaultDimensions = this._defaultWidgetDimensions(widget);\n      positions[widget.id] = {\n        col: (persistedDimensions.col === undefined ? defaultDimensions.col : persistedDimensions.col),\n        row: (persistedDimensions.row === undefined ? defaultDimensions.row : persistedDimensions.row),\n        height: (persistedDimensions.height === undefined ? defaultDimensions.height : persistedDimensions.height),\n        width: (persistedDimensions.width === undefined ? defaultDimensions.width : persistedDimensions.width),\n      };\n    });\n\n    const widgets = dashboard.widgets.sort((widget1, widget2) => {\n      const position1 = positions[widget1.id];\n      const position2 = positions[widget2.id];\n      if (position1.col === position2.col) {\n        return position1.row - position2.row;\n      }\n\n      return position1.col - position2.col;\n    }).map((widget) => {\n      return (\n        <div key={widget.id} className={style.widgetContainer}>\n          <Widget id={widget.id} key={`widget-${widget.id}`} widget={widget} dashboardId={dashboard.id}\n                  locked={this.state.locked} shouldUpdate={this.shouldUpdate()} streamIds={this.state.streamIds} />\n        </div>\n      );\n    });\n\n    return (\n      <Row>\n        <div className=\"dashboard\">\n          <ReactGridContainer positions={positions} onPositionsChange={this._onPositionsChange} locked={this.state.locked}>\n            {widgets}\n          </ReactGridContainer>\n        </div>\n      </Row>\n    );\n  },\n  _unlockDashboard(event) {\n    event.preventDefault();\n    if (this.state.locked) {\n      this._toggleUnlock();\n    }\n  },\n  _toggleUnlock() {\n    this.setState({ locked: !this.state.locked });\n  },\n  _onPositionsChange(newPositions) {\n    DashboardsStore.updatePositions(this.state.dashboard, newPositions);\n  },\n  _toggleFullscreen() {\n    const element = document.documentElement;\n    if (element.requestFullscreen) {\n      element.requestFullscreen();\n    } else if (element.mozRequestFullScreen) {\n      element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullscreen) {\n      element.webkitRequestFullscreen();\n    } else if (element.msRequestFullscreen) {\n      element.msRequestFullscreen();\n    }\n  },\n  _toggleUpdateInBackground() {\n    const forceUpdate = !this.state.forceUpdateInBackground;\n    this.setState({ forceUpdateInBackground: forceUpdate });\n    UserNotification.success(`Graphs will be updated ${forceUpdate ? 'even' : 'only'} when the browser is in the ${forceUpdate ? 'background' : 'foreground'}`, '');\n  },\n  render() {\n    if (!this.state.dashboard) {\n      return <Spinner />;\n    }\n\n    const dashboard = this.state.dashboard;\n\n    let actions;\n    if (!this._dashboardIsEmpty(dashboard)) {\n      actions = (\n        <div>\n          <Button id=\"update-unfocussed\" bsStyle=\"info\" onClick={this._toggleUpdateInBackground}>\n            Update in {this.state.forceUpdateInBackground ? 'foreground' : 'background'}\n          </Button>\n          {' '}\n          <Button className=\"toggle-fullscreen\" bsStyle=\"info\" onClick={this._toggleFullscreen}>Fullscreen</Button>\n          <IfPermitted permissions={`${this.DASHBOARDS_EDIT}:${dashboard.id}`}>\n            {' '}\n            <Button bsStyle=\"success\" onClick={this._toggleUnlock}>{this.state.locked ? 'Unlock / Edit' : 'Lock'}</Button>\n          </IfPermitted>\n        </div>\n      );\n    }\n\n    let supportText;\n    if (!this._dashboardIsEmpty(dashboard)) {\n      supportText = (\n        <IfPermitted permissions={`${this.DASHBOARDS_EDIT}:${dashboard.id}`}>\n          <div id=\"drag-widgets-description\">\n            Drag widgets to any position you like in <a href=\"#\" role=\"button\" onClick={this._unlockDashboard}>\n            unlock / edit</a> mode.\n          </div>\n        </IfPermitted>\n      );\n    }\n\n    const editDashboardTrigger = !this.state.locked && !this._dashboardIsEmpty(dashboard) ?\n      (<EditDashboardModalTrigger id={dashboard.id} action=\"edit\" title={dashboard.title}\n                                 description={dashboard.description} buttonClass=\"btn-info btn-xs\">\n        <i className=\"fa fa-pencil\" />\n      </EditDashboardModalTrigger>) : null;\n    const dashboardTitle = (\n      <span>\n        <span data-dashboard-id={dashboard.id} className=\"dashboard-title\">{dashboard.title}</span>\n        &nbsp;\n        {editDashboardTrigger}\n      </span>\n    );\n    return (\n      <DocumentTitle title={`Dashboard ${dashboard.title}`}>\n        <span>\n          <PageHeader title={dashboardTitle}>\n            <span data-dashboard-id={dashboard.id} className=\"dashboard-description\">{dashboard.description}</span>\n            {supportText}\n            {actions}\n          </PageHeader>\n\n          {this.formatDashboard(dashboard)}\n          <div className=\"clearfix\" />\n        </span>\n      </DocumentTitle>\n    );\n  },\n});\n\nexport default ShowDashboardPage;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/ShowDashboardPage.jsx","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"._3HrW10n1kzGWl5PDY4B2uD{background-color:#fff;border:1px solid #d1d1d1;z-index:auto}\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"widgetContainer\": \"_3HrW10n1kzGWl5PDY4B2uD\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader!./src/pages/ShowDashboardPage.css\n// module id = 1400\n// module chunks = 41","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js!./ShowDashboardPage.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js!./ShowDashboardPage.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js!./ShowDashboardPage.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/ShowDashboardPage.css\n// module id = 1466\n// module chunks = 41"],"sourceRoot":""}